# Where the command was summoned from.
CALL_PATH: String

# The user's home directory
HOME_PATH: String

# Where the Commands themselves are
MAIN_PATH: ::String

# The Command Class's aux folder, which holds all the other aux folders
AUXILIARIES_PATH: ::String

# The base class for all shell commands.
class Command
  include CommandErrors

  include Prompter

  include Filer

  include Shorthand

  private

  HELP_OPTIONS: ::Array["-h" | "--help"]

  INPUT_KEYS: ::Array[:flags | :parameters | :keywords]

  attr_writer inputs: Array[String]

  attr_writer received: Hash[Symbol, Array[String]]

  attr_writer accepted: Hash[Symbol, Array[String]]

  attr_writer assigned_options: Hash[Symbol, String | Array[String]]

  attr_writer assigned_keywords: Hash[Symbol, String]

  attr_writer options: Array[String]

  attr_writer flag_limit: Range[Integer]

  attr_writer parameter_limit: Range[Integer]

  attr_writer execution_path: String

  attr_writer case_sensitivity: Array[Symbol | bool]

  # @param argv [Array] This should always be ARGV
  # @param flag_limit [Range] The minimum and maximum number of flags kept by the mint.
  # @param parameter_limit [Range] The maximum number of parameters kept by the mint.
  # @param case_sensitive [Boolean, Symbol]
  def initialize: (Array[String] argv, ?flag_limit: Range[Integer], ?parameter_limit: Range[Integer], ?case_sensitive: bool | Array[Symbol]) -> void

  def normalize_case_sensitivity: (Symbol | bool | Array[Symbol] settings) -> (Array[Symbol | bool])

  def initialize_hashes: () -> void

  def clamp_range: (Range[Integer] range, ?bounds: Range[Integer]) -> ::Range[Integer]

  def process_inputs: () -> void

  # Takes the valid flag hash from initialization and extracts every valid
  # flag from it
  # @return [Void]
  def define_all_options: () -> void

  def receive_inputs: () -> void

  def receive_flags: () -> void

  def receive_parameters: () -> void

  def extract_possible_parameters: () -> void

  def accept_inputs: () -> void

  def create_acceptance_hash: () -> void

  def accept_flags: () -> void

  def accept_keywords: () -> void

  def accept_parameters: () -> void

  # Prints the command's help file.
  def help: () -> void

  def initialize_execution_path: () -> void

  def validate_flags: () -> void

  def flag_error_packet: (String erroneous_flag) -> { input: String, position: Integer, acceptable: Array[String] }

  public

  attr_reader inputs: Array[String]

  attr_reader received: Hash[Symbol, Array[String] | Hash[Symbol, String]]

  attr_reader accepted: Hash[Symbol, Array[String] | Hash[Symbol, untyped]]

  attr_reader assigned_options: Hash[Symbol, String | Array[String]]

  attr_reader assigned_keywords: Hash[Symbol, String]

  attr_reader options: Array[String]

  attr_reader flag_limit: Range[Integer]

  attr_reader parameter_limit: Range[Integer]

  attr_reader execution_path: String

  attr_reader case_sensitivity: Array[Symbol | bool]

  def run: () -> void
end
